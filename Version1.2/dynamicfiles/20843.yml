# ==============================================
# TEAM4 ENHANCED DYNAMIC ROUTING CONFIG
# ==============================================
# Includes special networking requirements and middleware

http:
  # ====================
  # ROUTERS
  # ====================
  routers:
    # Main OpenWebUI Interface (needs streaming support)
    team4-openwebui-router:
      rule: "Host(`team4-openwebui.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: team4-openwebui-service
      middlewares: 
        - streaming-headers
      tls:
        certResolver: letsencrypt

    # Alternative domain for OpenWebUI  
    openwebui-router:
      rule: "Host(`openwebui.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: team4-openwebui-service
      middlewares:
        - streaming-headers
      tls:
        certResolver: letsencrypt

    # LiteLLM Proxy
    litellm-router:
      rule: "Host(`litellm.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: team4-litellm-service
      tls:
        certResolver: letsencrypt

    # OpenWebUI Pipelines
    pipelines-router:
      rule: "Host(`pipelines.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: team4-pipelines-service
      tls:
        certResolver: letsencrypt

    # Ollama API
    ollama-router:
      rule: "Host(`ollama.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: team4-ollama-service
      tls:
        certResolver: letsencrypt

    # Qdrant Vector Database
    qdrant-router:
      rule: "Host(`qdrant.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: team4-qdrant-service
      tls:
        certResolver: letsencrypt

    # SearxNG Search Engine (needs proper headers)
    searxng-router:
      rule: "Host(`searxng.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: team4-searxng-service
      middlewares:
        - searxng-headers
      tls:
        certResolver: letsencrypt

    # Jupyter Notebooks (CRITICAL: needs websocket support)
    jupyter-router:
      rule: "Host(`jupyter.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: team4-jupyter-service
      middlewares:
        - jupyter-headers
      tls:
        certResolver: letsencrypt

    # Neo4j Graph Database Browser (WARNING: Limited functionality)
    neo4j-router:
      rule: "Host(`neo4j.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: team4-neo4j-service
      middlewares:
        - neo4j-headers
      tls:
        certResolver: letsencrypt

    # ClickHouse Analytics Database
    clickhouse-router:
      rule: "Host(`clickhouse.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: team4-clickhouse-service
      tls:
        certResolver: letsencrypt

    # Apache Tika Document Processing
    tika-router:
      rule: "Host(`tika.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: team4-tika-service
      tls:
        certResolver: letsencrypt

    # MCPO Tools Integration
    mcpo-router:
      rule: "Host(`mcpo.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: team4-mcpo-service
      tls:
        certResolver: letsencrypt

    # Faster-Whisper STT
    whisper-router:
      rule: "Host(`whisper.valuechainhackers.xyz`)"
      entryPoints: [websecure]
      service: team4-whisper-service
      tls:
        certResolver: letsencrypt

  # ====================
  # MIDDLEWARE  
  # ====================
  middlewares:
    # For OpenWebUI - ensures streaming works properly
    streaming-headers:
      headers:
        customRequestHeaders:
          X-Forwarded-Proto: "https"
        customResponseHeaders:
          X-Frame-Options: "DENY"
          X-Content-Type-Options: "nosniff"

    # For SearxNG - proper proxy headers
    searxng-headers:
      headers:
        customRequestHeaders:
          X-Forwarded-Proto: "https"
          X-Real-IP: "{{.ClientIP}}"
          X-Forwarded-For: "{{.ClientIP}}"

    # For Jupyter - critical websocket and session headers  
    jupyter-headers:
      headers:
        customRequestHeaders:
          X-Forwarded-Proto: "https"
          X-Real-IP: "{{.ClientIP}}"
          # Allow encoded slashes for JupyterLab 3.6+
          X-Original-URI: "{{.Request.RequestURI}}"

    # For Neo4j - browser interface headers (limited functionality)
    neo4j-headers:
      headers:
        customRequestHeaders:
          X-Forwarded-Proto: "https"
          X-Real-IP: "{{.ClientIP}}"
        customResponseHeaders:
          # Warning header about limited functionality
          X-Neo4j-Warning: "Browser access only - Bolt connections may not work"

  # ====================
  # SERVICES
  # ====================
  services:
    team4-openwebui-service:
      loadBalancer:
        servers:
          - url: "http://10.0.8.43:8080"
        passHostHeader: true

    team4-litellm-service:
      loadBalancer:
        servers:
          - url: "http://10.0.8.43:4000"
        passHostHeader: true

    team4-pipelines-service:
      loadBalancer:
        servers:
          - url: "http://10.0.8.43:9099"
        passHostHeader: true

    team4-ollama-service:
      loadBalancer:
        servers:
          - url: "http://10.0.8.43:11434"
        passHostHeader: true

    team4-qdrant-service:
      loadBalancer:
        servers:
          - url: "http://10.0.8.43:6333"
        passHostHeader: true

    team4-searxng-service:
      loadBalancer:
        servers:
          - url: "http://10.0.8.43:8081"
        passHostHeader: true

    team4-jupyter-service:
      loadBalancer:
        servers:
          - url: "http://10.0.8.43:8888"
        passHostHeader: true

    team4-neo4j-service:
      loadBalancer:
        servers:
          - url: "http://10.0.8.43:7474"
        passHostHeader: true

    team4-clickhouse-service:
      loadBalancer:
        servers:
          - url: "http://10.0.8.43:8123"
        passHostHeader: true

    team4-tika-service:
      loadBalancer:
        servers:
          - url: "http://10.0.8.43:9998"
        passHostHeader: true

    team4-mcpo-service:
      loadBalancer:
        servers:
          - url: "http://10.0.8.43:8000"
        passHostHeader: true

    team4-whisper-service:
      loadBalancer:
        servers:
          - url: "http://10.0.8.43:10300"
        passHostHeader: true

# ==============================================
# CRITICAL NETWORKING ISSUES FOUND
# ==============================================

# üö® JUPYTER NOTEBOOKS - MAJOR ISSUE:
# Jupyter requires WebSocket connections for notebook kernels to work.
# Traefik doesn't handle WebSocket upgrades the same way as Nginx.
# 
# SOLUTION OPTIONS:
# 1. Use Traefik TCP routing for port 8888 (not HTTPS)
# 2. Add custom middleware for WebSocket handling
# 3. Use direct port access for Jupyter functionality

# üö® NEO4J - MAJOR ISSUE:  
# Neo4j browser needs BOTH HTTP (7474) AND Bolt (7687) protocols.
# The browser interface loads but can't connect to database without Bolt.
# Bolt is TCP-based and needs stream proxy, not HTTP proxy.
#
# SOLUTION OPTIONS:
# 1. Expose Neo4j Bolt port 7687 directly (not through Traefik)
# 2. Use TCP routing for Bolt connections
# 3. Accept limited browser-only functionality

# ‚ö†Ô∏è  OPENWEBUI - MINOR ISSUE:
# May have streaming issues with AI responses without proper headers.
# Added streaming-headers middleware to help.

# ‚úÖ OTHER SERVICES:
# SearxNG, ClickHouse, Ollama, Qdrant, Tika, MCPO, Whisper
# Should work fine with standard HTTP proxy.

# ==============================================
# RECOMMENDED ACTIONS
# ==============================================
# 1. Test Jupyter notebooks - if kernels don't connect, may need direct port access
# 2. Test Neo4j database connections - if fails, expose port 7687 directly  
# 3. Monitor OpenWebUI for streaming response issues
# 4. Consider using separate TCP routes for problematic services