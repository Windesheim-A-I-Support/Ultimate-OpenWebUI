#!/usr/bin/env bash
#
# This script ensures openssh-server is installed, configured for basic access,
# and running on a Debian or Ubuntu system.
# It is designed to be robust and can be run on fresh or existing systems.
#

# Exit immediately if a command exits with a non-zero status.
# Treat unset variables as an error.
# The return value of a pipeline is the status of the last command to exit with a non-zero status.
set -euo pipefail

# --- Helper Functions ---
log()  { echo "[*] $*"; }
warn() { echo "[!] $*" >&2; }
need_root(){ [[ $EUID -eq 0 ]] || { warn "This script must be run as root. Try: sudo $0"; exit 1; }; }

# --- Script Variables ---
BACKUP_DIR="/root/ssh-backup-$(date +%F-%H%M%S)"

# --- Main Functions ---

backup_current() {
  log "Backing up existing SSH configuration to ${BACKUP_DIR}..."
  mkdir -p "$BACKUP_DIR"
  # If /etc/ssh exists, copy its contents. Ignore errors if it doesn't exist.
  if [[ -d /etc/ssh ]]; then
    cp -a /etc/ssh "$BACKUP_DIR"/ || true
  fi
}

purge_openssh() {
  log "Purging openssh-server to ensure a clean state..."
  apt-get update -y
  # Purge the package, which removes config files. Non-interactive to avoid prompts.
  DEBIAN_FRONTEND=noninteractive apt-get purge -y openssh-server || true
  # Also remove potential custom overrides that could conflict with our new config.
  rm -rf /etc/systemd/system/ssh.service.d 2>/dev/null || true
  rm -rf /etc/ssh/sshd_config.d 2>/dev/null || true
}

reinstall_openssh() {
  log "Reinstalling openssh-server..."
  DEBIAN_FRONTEND=noninteractive apt-get install -y openssh-server
}

write_clean_config() {
  log "Writing a clean /etc/ssh/sshd_config..."
  # This heredoc overwrites the sshd_config file with a simple, known-good baseline.
  cat > /etc/ssh/sshd_config <<'EOF'
# Generated by setup-ssh script.

Port 22
ListenAddress 0.0.0.0
ListenAddress ::

# Authentication
PermitRootLogin yes
PasswordAuthentication yes
PubkeyAuthentication yes
ChallengeResponseAuthentication no
UsePAM yes

# SFTP Subsystem
Subsystem sftp internal-sftp

# Connection Settings
TCPKeepAlive yes
ClientAliveInterval 120
ClientAliveCountMax 3
EOF
  chmod 644 /etc/ssh/sshd_config
}

manage_host_keys() {
  log "Managing SSH host keys..."
  # If we backed up original host keys, restore them to prevent client warnings
  # on subsequent connections if this script is run more than once.
  if compgen -G "${BACKUP_DIR}/ssh/ssh_host_*" > /dev/null; then
    log "Restoring original host keys from backup..."
    cp -a "${BACKUP_DIR}/ssh/ssh_host_*" /etc/ssh/ 2>/dev/null || true
  fi

  # Ensure all default key types are present. This is idempotent and only
  # creates keys that are missing.
  log "Generating any missing host keys..."
  ssh-keygen -A
}

enable_restart_service() {
  log "Enabling and restarting the SSH service..."
  systemctl enable ssh >/dev/null 2>&1 || true

  # Add a systemd drop-in for resilience, so it auto-restarts if it crashes.
  mkdir -p /etc/systemd/system/ssh.service.d
  cat > /etc/systemd/system/ssh.service.d/10-restart-always.conf <<'EOF'
[Service]
Restart=always
RestartSec=2s
EOF
  systemctl daemon-reload

  # CRITICAL: Test the new config before restarting the service.
  if ! sshd -t; then
    warn "sshd config test failed. Check /etc/ssh/sshd_config. Aborting restart."
    exit 1
  fi
  systemctl restart ssh
}

open_firewall_if_active() {
  # Check for UFW (Uncomplicated Firewall)
  if command -v ufw >/dev/null 2>&1 && ufw status | grep -qi "Status: active"; then
    log "UFW is active. Allowing port 22..."
    ufw allow 22/tcp || true
  fi
  # Check for firewalld
  if command -v firewall-cmd >/dev/null 2>&1 && systemctl is-active --quiet firewalld; then
    log "firewalld is active. Opening SSH service..."
    firewall-cmd --permanent --add-service=ssh || true
    firewall-cmd --reload || true
  fi
}

diagnostics() {
  echo # Add a blank line for readability
  log "--- SSH Service Status ---"
  # Use sshd -T to show the final, effective configuration (including defaults).
  log "Effective settings (key lines):"
  sshd -T 2>/dev/null | grep -E '^(port|listenaddress|permitrootlogin|passwordauthentication|pubkeyauthentication|subsystem)'

  echo
  log "Active listeners on port 22:"
  # Use ss to check for listening sockets. Grep for sshd or port 22.
  ss -lntp | grep -E '(:22[[:space:]]|sshd)' || echo "  -> No listener found on port 22!"

  echo
  log "Setup complete. You should now be able to connect:"
  echo "  ssh root@<SERVER_IP>"
}

main() {
  need_root
  backup_current
  purge_openssh
  reinstall_openssh
  write_clean_config
  manage_host_keys
  enable_restart_service
  open_firewall_if_active
  diagnostics
  echo
  log "Backup of old SSH data is located at: ${BACKUP_DIR}"
}

# Run the main function with all script arguments
main "$@"