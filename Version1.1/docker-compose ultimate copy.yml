services:
  # The unified LLM API Gateway. All services will connect to it.
  # LiteLLM needs a robust configuration. A simple model declaration is often not enough.
  litellm:
    container_name: litellm
    image: ghcr.io/berriai/litellm:main-stable
    ports:
      - "4000:4000"
    volumes:
      - ./litellm/config.yaml:/app/config.yaml
    command: ["--config", "/app/config.yaml"]
    restart: always
    networks:
      - main-network

  # Main UI for interacting with models.
  open-webui:
    container_name: open-webui
    image: ghcr.io/open-webui/open-webui:main
    ports:
      - "8080:8080"
    environment:
      - 'OPENAI_API_BASE_URL=http://litellm:4000'
      - 'OLLAMA_BASE_URL=http://ollama:11434'
      - 'QDRANT_URI=http://qdrant:6333'
      - 'LANGFUSE_HOST=http://langfuse:3000'
      - 'LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}'
      - 'LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}'
      - 'COMFYUI_BASE_URL=http://comfyui:8188'
      - 'AUDIO_TTS_OPENAI_API_BASE_URL=http://kokoro:8880/v1'
      - 'DEFAULT_MODEL=${DEFAULT_MODEL}'
      - 'WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY}'
      - 'LITELLM_API_KEY=${LITELLM_API_KEY}'
    volumes:
      - open-webui-data:/app/backend/data
    restart: always
    depends_on:
      litellm:
        condition: service_started
      ollama:
        condition: service_started
      qdrant:
        condition: service_started
      langfuse:
        condition: service_started
      comfyui:
        condition: service_started
      kokoro:
        condition: service_started
    networks:
      - main-network
      - traefik_network

  # Ollama LLM Backend
  ollama:
    container_name: ollama
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ./ollama/models:/root/.ollama
    restart: always
    networks:
      - main-network

  # Langfuse for LLM Observability
  langfuse:
    container_name: langfuse
    image: ghcr.io/langfuse/langfuse:latest
    ports:
      - "3000:3000"
    environment:
      - 'DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/postgres'
      - 'NEXTAUTH_SECRET=${NEXTAUTH_SECRET}'
      - 'NEXTAUTH_URL=http://langfuse:3000'
      - 'AUTH_GITHUB_ID='
      - 'AUTH_GITHUB_SECRET='
      - 'AUTH_GOOGLE_ID='
      - 'AUTH_GOOGLE_SECRET='
      - 'DISABLE_ANONYMOUS_METRICS=1'
    volumes:
      - langfuse-data:/app/langfuse-data
    restart: always
    depends_on:
      db:
        condition: service_healthy
    networks:
      - main-network

  # Postgres Database for Langfuse
  db:
    container_name: db
    image: postgres:15-alpine
    environment:
      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_DB=postgres'
    volumes:
      - ./langfuse/postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - main-network
  
  # Qdrant Vector Database
  qdrant:
    container_name: qdrant
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./qdrant/data:/qdrant/data
    restart: always
    networks:
      - main-network

  # SearXNG Meta-Search Engine
  searxng:
    container_name: searxng
    image: searxng/searxng:latest
    environment:
      - 'SEARXNG_BASE_URL=http://searxng:8081'
    ports:
      - "8081:8081"
    volumes:
      - ./searxng/data:/etc/searxng
    restart: always
    networks:
      - main-network


  # Kokoro for TTS
  kokoro:
    container_name: kokoro
    image: kokoro-tts:latest
    ports:
      - "8880:8880"
    restart: always
    networks:
      - main-network

  mcpo:
    image: ghcr.io/open-webui/mcpo:main
    container_name: mcpo
    restart: unless-stopped
    ports:
      - "8000:8000"   # -> http://10.0.8.42:8000  (Traefik target)
    # Variant A: single MCP server (example: time)
    command: ["--port","8000","--api-key","${MCPO_API_KEY:-top-secret}","--",
              "uvx","mcp-server-time","--local-timezone=Europe/Amsterdam"]
    # --- Variant B: multiple MCP servers via config (uncomment to use) ---
    # volumes:
    #   - ./mcpo.json:/app/config.json:ro
    # command: ["--config","/app/config.json","--hot-reload",
    #           "--api-key","${MCPO_API_KEY:-top-secret}"]
    # ---------------------------------------------------------------
    healthcheck:
      test: ["CMD-SHELL","curl -fsS http://localhost:8000/docs >/dev/null || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 5s

      
  # Jupyter Notebook
  jupyter:
    container_name: jupyter
    image: jupyter/base-notebook:latest
    ports:
      - "8888:8888"
    restart: always
    networks:
      - main-network
      
  # Nginx or Traefik as the reverse proxy
  # You already have a Traefik setup. Use this as a reference.
  reverse-proxy:
    image: traefik:v2.10
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=your-email@example.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik API dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/acme.json:/acme.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.valuechainhackers.xyz`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
    networks:
      - traefik_network
  
networks:
  main-network:
    name: main-network
  traefik_network:
    name: traefik_network

volumes:
  open-webui-data:
  ollama-data:
  langfuse-data:
  qdrant-data:
  searxng-data:
  comfyui-data:
  kokoro-data:
  mcpo-data:
  jupyter-data:
